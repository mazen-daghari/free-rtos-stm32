#include "main.h"
#include "cmsis_os.h"
#include "usb_host.h"

I2C_HandleTypeDef hi2c1;
I2S_HandleTypeDef hi2s3;
SPI_HandleTypeDef hspi1;
osThreadId defaultTaskHandle;
TaskHandle_t myTask1Handle = NULL; 
TaskHandle_t myTask2Handle = NULL;

// Prototypes de fonctions
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_I2S3_Init(void);
static void MX_SPI1_Init(void);
void StartDefaultTask(void const * argument);

// Tâche pour contrôler les LED LD4 et LD3
void Led_GateKeeper(void *pvParameters)
{
    TickType_t xDelay = 1000 / portTICK_PERIOD_MS; // Délai de 1 seconde
    for(;;)
    {
        HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin ,GPIO_PIN_RESET); // éteindre les LED
        vTaskDelay(xDelay); // Attente
        HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin ,GPIO_PIN_SET);   // allumer les LED
        vTaskDelay(xDelay); // Attente
    }
}

// Tâche pour contrôler la LED LD5 avec un clignotement rapide
void Led_GateKeeper1(void *pvParameters)
{
    TickType_t xShortDelay = 100 / portTICK_PERIOD_MS; // Délai court (100 ms)
    TickType_t xLongDelay = 1000 / portTICK_PERIOD_MS; // Délai long (1 s)

    for(;;)
    {
        for(int i = 0; i < 3; i++) // Boucle pour 3 clignotements rapides
        {
            HAL_GPIO_WritePin(GPIOD, LD5_Pin, GPIO_PIN_SET); // Allumer LD5
            vTaskDelay(xShortDelay);
            HAL_GPIO_WritePin(GPIOD, LD5_Pin, GPIO_PIN_RESET); // Éteindre LD5
            vTaskDelay(xShortDelay);
        }
        vTaskDelay(xLongDelay); // Attente entre les séquences de clignotement
    }
}

// Tâche pour contrôler LD6 en fonction de l'état d'un bouton (B1)
void Led_GateKeeper3(void *pvParameters)
{
    TickType_t xDelay = 1000 / portTICK_PERIOD_MS; // Délai de 1 seconde
    for(;;)
    {
        if (HAL_GPIO_ReadPin(GPIOA, B1_Pin) == 1) // Si le bouton est pressé
        {
            vTaskSuspend(myTask1Handle); // Suspendre les autres tâches
            vTaskSuspend(myTask2Handle);
            HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_SET); // Allumer LD6
            vTaskDelay(xDelay);
            HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_RESET); // Éteindre LD6
            vTaskDelay(xDelay);
        }
        else // Si le bouton n'est pas pressé
        {
            vTaskSuspend(myTask1Handle); // Suspendre les autres tâches
            vTaskSuspend(myTask2Handle);
            HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_RESET); // Assurer que LD6 est éteinte
            vTaskDelay(xDelay);
        }
    }
}

int main(void)
{
    HAL_Init(); // Initialisation de la HAL
    SystemClock_Config(); // Configuration de l'horloge du système
    MX_GPIO_Init(); // Initialisation des GPIO
    MX_I2C1_Init(); // Initialisation de l'I2C
    MX_I2S3_Init(); // Initialisation de l'I2S
    MX_SPI1_Init(); // Initialisation de l'SPI

    // Création des tâches FreeRTOS
    xTaskCreate(Led_GateKeeper, "led_gate_1", configMINIMAL_STACK_SIZE, 0, 2, &myTask1Handle);
    xTaskCreate(Led_GateKeeper1, "led_gate_2", configMINIMAL_STACK_SIZE, 0, 2, &myTask2Handle);
    xTaskCreate(Led_GateKeeper3, "led_gate_3", configMINIMAL_STACK_SIZE, 0, 2, NULL);

    // Création de la tâche par défaut (CMSIS-RTOS)
    osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
    defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

    osKernelStart(); // Lancement du kernel FreeRTOS

    while (1) // Boucle infinie (ne devrait jamais être atteinte)
    {
    }
}

// Configuration de l'horloge du système
void SystemClock_Config(void)
{
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

    __HAL_RCC_PWR_CLK_ENABLE();
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
    RCC_OscInitStruct.PLL.PLLM = 8;
    RCC_OscInitStruct.PLL.PLLN = 336;
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
    RCC_OscInitStruct.PLL.PLLQ = 7;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
    {
        Error_Handler();
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
    {
        Error_Handler();
    }
}

// Les fonctions MX_* permettent d'initialiser les périphériques
static void MX_I2C1_Init(void)
{
    // Initialisation d'I2C1
    hi2c1.Instance = I2C1;
    hi2c1.Init.ClockSpeed = 100000;
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
    hi2c1.Init.OwnAddress1 = 0;
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
    hi2c1.Init.OwnAddress2 = 0;
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
    {
        Error_Handler();
    }
}

static void MX_I2S3_Init(void)
{
    // Initialisation d'I2S3
    hi2s3.Instance = SPI3;
    hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
    hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
    hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
    hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
    hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
    hi2s3.Init.CPOL = I2S_CPOL_LOW;
    hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
    hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
    if (HAL_I2S_Init(&hi2s3) != HAL_OK)
    {
        Error_Handler();
    }
}

static void MX_SPI1_Init(void)
{
    // Initialisation de SPI1
    hspi1.Instance = SPI1;
    hspi1.Init.Mode = SPI_MODE_MASTER;
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
    hspi1.Init.NSS = SPI_NSS_SOFT;
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
    hspi1.Init.CRCPolynomial = 10;
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
    {
        Error_Handler();
    }
}

static void MX_GPIO_Init(void)
{
    GPIO_InitTypeDef GPIO_InitStruct = {0};

    // Activation des horloges pour les GPIO
    __HAL_RCC_GPIOE_CLK_ENABLE();
    __HAL_RCC_GPIOC_CLK_ENABLE();
    __HAL_RCC_GPIOH_CLK_ENABLE();
    __HAL_RCC_GPIOA_CLK_ENABLE();
    __HAL_RCC_GPIOB_CLK_ENABLE();
    __HAL_RCC_GPIOD_CLK_ENABLE();

    // Configuration des GPIO (LEDs, Boutons, etc.)
    HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);

    GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
}

void StartDefaultTask(void const * argument)
{
    MX_USB_HOST_Init(); // Initialisation du module USB Host

    for(;;)
    {
        osDelay(1); // Attente passive
    }
}

void Error_Handler(void)
{
    __disable_irq();
    while (1) // Boucle infinie en cas d'erreur
    {
    }
}
