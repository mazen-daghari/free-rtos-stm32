#include "main.h"
#include "cmsis_os.h"
#include "usb_host.h"

// Gestionnaires pour les périphériques I2C, I2S et SPI
I2C_HandleTypeDef hi2c1;
I2S_HandleTypeDef hi2s3;
SPI_HandleTypeDef hspi1;

// Identifiants pour les tâches dans le RTOS
osThreadId myTask1Handle;
osThreadId myTask2Handle;

// Mutex pour s'assurer que l'accès à certaines ressources est bien synchronisé
SemaphoreHandle_t xMutex;

// Prototypes pour l'initialisation et la configuration du système
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_I2S3_Init(void);
static void MX_SPI1_Init(void);
void StartTask1(void const * argument);
void StartTask2(void const * argument);

// Fonction associée à la première tâche : elle contrôle une LED en respectant le mutex
void Led_GateKeeper1(void *pvParameters)
{
    TickType_t xDelay = pdMS_TO_TICKS(500); // Délai de 500 ms
    for (;;) {
        // On essaie de prendre le mutex (attente infinie s'il est occupé)
        if (xSemaphoreTake(xMutex, portMAX_DELAY) == pdTRUE) {
            // Allumer la LED
            HAL_GPIO_WritePin(GPIOD, LD5_Pin, GPIO_PIN_SET);
            vTaskDelay(xDelay); // Attendre 500 ms
            // Éteindre la LED
            HAL_GPIO_WritePin(GPIOD, LD5_Pin, GPIO_PIN_RESET);
            // Relâcher le mutex pour permettre à d'autres tâches d'accéder à la LED
            xSemaphoreGive(xMutex);
        }
        // Petite pause avant de recommencer
        vTaskDelay(xDelay);
    }
}

// Fonction associée à la deuxième tâche : elle fait clignoter une LED avec un séquence particulièr
void Led_GateKeeper2(void *pvParameters)
{
    TickType_t xShortDelay = pdMS_TO_TICKS(100); // Délai court de 100 ms
    TickType_t xLongDelay = pdMS_TO_TICKS(1000); // Délai long de 1000 ms
    for (;;) {
        // On attend le mutex pour contrôler la LED
        if (xSemaphoreTake(xMutex, portMAX_DELAY) == pdTRUE) {
            // Faire clignoter la LED trois fois
            for (int i = 0; i < 3; i++) {
                HAL_GPIO_TogglePin(GPIOD, LD5_Pin); // Basculer l'état de la LED
                vTaskDelay(xShortDelay); // Attendre une courte moment
                HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
                vTaskDelay(xShortDelay);
            }
            // Relâcher le mutex après utilisation
            xSemaphoreGive(xMutex);
        }
        // Attendre un moment avant de relancer la séquence
        vTaskDelay(xLongDelay);
    }
}

int main(void)
{
    HAL_Init(); // Initialiser la bibliothèque HAL (Hardware Abstraction Layer)

    SystemClock_Config(); // Configurer l'horloge système

    // Initialisation des périphériques utilisés
    MX_GPIO_Init();
    MX_I2C1_Init();
    MX_I2S3_Init();
    MX_SPI1_Init();

    // Créer un mutex pour synchroniser l'accès aux ressources partagées
    xMutex = xSemaphoreCreateMutex();

    // Lancer les tâches dans le RTOS
    xTaskCreate(Led_GateKeeper1, "led_gate1", configMINIMAL_STACK_SIZE, 0, 2, 0);
    xTaskCreate(Led_GateKeeper2, "led_gate2", configMINIMAL_STACK_SIZE, 0, 2, 0);

    osKernelStart(); // Démarrer le planificateur du RTOS

    while (1)
    {
        // Boucle infinie (ne sera jamais atteinte car le RTOS prend le contrôle après osKernelStart)
    }
}

// Configuration de l'horloge système
void SystemClock_Config(void)
{
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

    __HAL_RCC_PWR_CLK_ENABLE(); // Activer l'horloge pour le module de gestion de l'alimentation
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // Régler la tension pour une meilleure performance

    // Configuration de l'oscillateur principal
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE; // Utilisation d'un oscillateur externe
    RCC_OscInitStruct.HSEState = RCC_HSE_ON; // Activer l'oscillateur externe
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON; // Activer le PLL pour générer une fréquence plus élevée
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE; // Utiliser l'oscillateur externe comme source PLL
    RCC_OscInitStruct.PLL.PLLM = 8;
    RCC_OscInitStruct.PLL.PLLN = 336;
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
    RCC_OscInitStruct.PLL.PLLQ = 7;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
    {
        Error_Handler(); // En cas d'erreur de configuration
    }

    // Configuration des bus AHB, APB1 et APB2
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
                                  | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK; // Utiliser le PLL comme source principale
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
    {
        Error_Handler(); // En cas d'erreur de configuration
    }
}

// Initialisation de l'I2C
static void MX_I2C1_Init(void)
{
    hi2c1.Instance = I2C1; // Utilisation du périphérique I2C1
    hi2c1.Init.ClockSpeed = 100000; // Vitesse standard de 100 kHz
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
    hi2c1.Init.OwnAddress1 = 0; // Pas d'adresse spécifique
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT; // Mode d'adressage 7 bits
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE; // Pas de mode d'adresse double
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE; // Pas d'appel général
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE; // Pas de désactivation du mode "stretching"
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
    {
        Error_Handler(); // Gérer l'erreur si l'initialisation échoue
    }
}

// Les autres fonctions d'initialisation (I2S, SPI, GPIO) suivent un schéma similaire
